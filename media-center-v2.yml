################################################################################
# DOCKER COMPOSE - MEDIA-CENTER-V2 BY JUFTIN
################################################################################

version: "3.7"

################################################################################
# NETWORKING CONFIGURATION
################################################################################

networks:
    traefik:
        driver: bridge
    internal:
        driver: bridge
    docker_socket_proxy:
        driver: bridge

################################################################################
# SERVICES CONFIGURATION
################################################################################

services:

    ########################################################
    # ROUTING AND SERVING
    ########################################################

    ####################################
    # TRAEFIK (REVERSE PROXY)
    ####################################

    traefik:
        container_name: traefik
        image:          library/traefik:v2.3
        hostname:       ${TRAEFIK_SUBDOMAIN}
        ports:
            -   published: 80
                target:    80
                protocol:  tcp
                mode:      host
            -   published: 443
                target:    443
                protocol:  tcp
                mode:      host
        environment:
            CF_API_EMAIL: ${CLOUDFLARE_EMAIL}
            CF_API_KEY:   ${CLOUDFLARE_API_KEY}
        volumes:
            - ${DOCKER_DIRECTORY}/traefik/config:/etc/traefik
            - ${DOCKER_DIRECTORY}/traefik/rules:/rules
            - ${DOCKER_DIRECTORY}/traefik/logs:/logs
            - ${DOCKER_DIRECTORY}/shared:/shared
            - /var/run/docker.sock:/var/run/docker.sock:ro
            - ${DOCKER_DIRECTORY}/traefik/acme/acme.json:/acme.json
        networks:
            traefik:             null
            docker_socket_proxy: null
        restart:        ${UNIVERSAL_RESTART_POLICY}
        depends_on:
            - socket-proxy
            - duckdns
            - oauth
        command:
            # GLOBAL SETTINGS
            - --global.checkNewVersion=true
            - --global.sendAnonymousUsage=false
            # API SETTINGS
            - --api=true
            - --api.dashboard=true
            # LOGGING SETTINGS
            - --log=true
            - --log.level=INFO # DEBUG, INFO, WARN, ERROR, FATAL, PANIC
            - --log.format=COMMON
            - --accessLog=true
            - --accessLog.filePath=/logs/access.log
            - --accessLog.format=JSON
            - --accessLog.bufferingSize=100
            - --accessLog.filters.statusCodes=400-499
            - --accessLog.filters.retryAttempts=true
            - --accessLog.filters.minDuration=10ms
            # PROVIDERS
            - --providers.docker=true
            - --providers.docker.endpoint=tcp://socket-proxy:2375
            - --providers.docker.exposedByDefault=false
            - --providers.docker.network=traefik
            - --providers.docker.swarmMode=false
            - --providers.file.directory=/rules
            - --providers.file.watch=true
            # ENTRYPOINTS
            - --entryPoints.http.address=:80
            - --entryPoints.https.address=:443
            - --entryPoints.traefik.address=:8080
            - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/12,172.64.0.0/13,131.0.72.0/22
            - --entrypoints.https.http.tls.certresolver=dns-cloudflare
            - --entrypoints.https.http.tls.domains[0].main=${DOMAIN_NAME}
            - --entrypoints.https.http.tls.domains[0].sans=*.${DOMAIN_NAME}
            - --entrypoints.https.http.tls.options=tls-opts@file
            # CERTIFICATE RESOLVERS
            - --certificatesResolvers.dns-cloudflare.acme.email=${CLOUDFLARE_EMAIL}
            - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
            - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
            - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
            - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.delayBeforeCheck=90
            # TESTING SETTINGS (COMMENTED OUT BY DEFAULT)
            # - --api.insecure=true
            # - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory
        labels:
            traefik.enable:                                                   true
            traefik.http.routers.traefik-rtr.rule:                            Host(`${TRAEFIK_SUBDOMAIN}.${DOMAIN_NAME}`)
            traefik.http.routers.traefik-rtr.entrypoints:                     https
            traefik.http.routers.traefik-rtr.service:                         api@internal
            traefik.http.routers.http-catchall.entrypoints:                   http
            traefik.http.routers.http-catchall.rule:                          HostRegexp(`{host:.+}`)
            traefik.http.routers.http-catchall.middlewares:                   redirect-to-https
            traefik.http.middlewares.redirect-to-https.redirectscheme.scheme: https
            traefik.http.routers.traefik-rtr.middlewares:                     chain-oauth-google@file

    ####################################
    # SOCKET-PROXY (DOCKER.SOCK)
    ####################################

    socket-proxy:
        container_name: socket-proxy
        image:          tecnativa/docker-socket-proxy:latest
        restart:        ${UNIVERSAL_RESTART_POLICY}
        privileged:     true
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock:ro
        networks:
            docker_socket_proxy: null
        ports:
            - "127.0.0.1:2375:2375"
        env_file:
            - ${DOCKER_DIRECTORY}/traefik_proxy/proxy_settings.env
        depends_on:
            - duckdns

    ####################################
    # OAUTH (GOOGLE OAUTH FOR ADMIN)
    ####################################

    oauth:
        container_name: oauth
        image:          thomseddon/traefik-forward-auth:latest
        hostname:       oauth
        environment:
            PROVIDERS_GOOGLE_CLIENT_ID:     ${GOOGLE_CLIENT_ID}
            PROVIDERS_GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
            SECRET:                         ${OAUTH_SECRET}
            COOKIE_DOMAIN:                  ${DOMAIN_NAME}
            INSECURE_COOKIE:                "false"
            AUTH_HOST:                      oauth.${DOMAIN_NAME}
            URL_PATH:                       /_oauth
            WHITELIST:                      ${OAUTH_WHITELIST}
            LOG_LEVEL:                      DEBUG
            LIFETIME:                       2592000
            DEFAULT_ACTION:                 auth
            DEFAULT_PROVIDER:               google
        networks:
            traefik: null
        restart:        ${UNIVERSAL_RESTART_POLICY}
        depends_on:
            - duckdns
        labels:
            traefik.enable:                                           true
            traefik.http.routers.oauth-rtr.rule:                      Host(`oauth.${DOMAIN_NAME}`)
            traefik.http.routers.oauth-rtr.entrypoints:               https
            traefik.http.routers.oauth-rtr.service:                   oauth-svc
            traefik.http.services.oauth-svc.loadbalancer.server.port: 4181
            traefik.http.routers.oauth-rtr.middlewares:               chain-oauth-google@file

    ########################################################
    # BACK-END APPLICATIONS
    ########################################################

    ####################################
    # DUCKDNS (DYNAMIC DNS MONITORING)
    ####################################

    duckdns:
        container_name: duckdns
        image:          linuxserver/duckdns:latest
        environment:
            PUID:       ${PUID}
            PGID:       ${PGID}
            TZ:         ${TZ}
            SUBDOMAINS: ${DUCKDNS_SUBDOMAIN}
            TOKEN:      ${DUCKDNS_TOKEN}
        networks:
            internal: null
        labels:
            com.ouroboros.enable: "true"
        restart:        ${UNIVERSAL_RESTART_POLICY}

    ####################################
    # WATCHTOWER (CONTAINER IMAGE UPDATING)
    ####################################

    watchtower:
        container_name: watchtower
        image:          containrrr/watchtower:latest
        restart:        unless-stopped
        networks:
            internal:            null
            docker_socket_proxy: null
        depends_on:
            - socket-proxy
        environment:
            TZ:                            $TZ
            WATCHTOWER_CLEANUP:            "true"
            WATCHTOWER_REMOVE_VOLUMES:     "true"
            WATCHTOWER_INCLUDE_STOPPED:    "true"
            WATCHTOWER_NO_STARTUP_MESSAGE: "false"
            WATCHTOWER_SCHEDULE:           "0 30 12 * * *"
            DOCKER_HOST:                   tcp://socket-proxy:2375

    ########################################################
    # FRONT-END APPLICATIONS
    ########################################################

    ####################################
    # HEIMDALL (LANDING PAGE)
    ####################################

    heimdall:
        container_name: heimdall
        image:          linuxserver/heimdall:latest
        restart:        ${UNIVERSAL_RESTART_POLICY}
        networks:
            traefik: null
        volumes:
            - ${DOCKER_DIRECTORY}/heimdall/config:/config
        environment:
            - PUID=$PUID
            - PGID=$PGID
            - TZ=$TZ
        labels:
            traefik.enable:                                              true
            traefik.http.routers.heimdall-rtr.rule:                      Host(`${DOMAIN_NAME}`)
            traefik.http.routers.heimdall-rtr.entrypoints:               https
            traefik.http.routers.heimdall-rtr.service:                   heimdall-svc
            traefik.http.services.heimdall-svc.loadbalancer.server.port: 80
            traefik.http.routers.heimdall-rtr.middlewares:               chain-oauth-google@file

    ####################################
    # OMBI (DOWNLOAD REQUESTS)
    ####################################

    ombi:
        container_name: ombi
        image:          linuxserver/ombi:latest
        hostname:       ${OMBI_SUBDOMAIN}
        environment:
            PUID: ${PUID}
            PGID: ${PGID}
            TZ:   ${TZ}
        volumes:
            - ${DOCKER_DIRECTORY}/ombi/config:/config
            - ${DOCKER_DIRECTORY}/shared:/shared
        networks:
            traefik: null
        restart:        ${UNIVERSAL_RESTART_POLICY}
        depends_on:
            - traefik
        labels:
            traefik.enable:                                          true
            traefik.http.routers.ombi-rtr.rule:                      Host(`${OMBI_SUBDOMAIN}.${DOMAIN_NAME}`)
            traefik.http.routers.ombi-rtr.entrypoints:               https
            traefik.http.routers.ombi-rtr.service:                   ombi-svc
            traefik.http.services.ombi-svc.loadbalancer.server.port: 3579
            traefik.http.routers.ombi-rtr.middlewares:               chain-oauth-google@file

    ####################################
    # PLEX (MOVIES AND TV SERVER)
    ####################################

    plex:
        container_name: plex
        image:          linuxserver/plex:latest
        network_mode:   host
        volumes:
            - ${DOCKER_DIRECTORY}/plex/config:/config
            - ${TV_DIR}:/tv
            - ${MOVIE_DIR}:/movies
            - ${PLEX_TRANSCODE_DIR}:/transcode
            - ${DOCKER_DIRECTORY}/shared:/shared
        environment:
            TZ:      ${TZ}
            PUID:    ${PUID}
            PGID:    ${PGID}
            VERSION: docker
        restart:        ${UNIVERSAL_RESTART_POLICY}

    ####################################
    # TAUTULLI (PLEX SERVER MONITORING)
    ####################################

    tautulli:
        container_name: tautulli
        image:          linuxserver/tautulli:latest
        hostname:       ${TAUTULLI_SUBDOMAIN}
        volumes:
            - ${DOCKER_DIRECTORY}/tautulli/config:/config
            - ${DOCKER_DIRECTORY}/plex/config/Library/Application Support/Plex Media Server/Logs:/logs:ro
            - ${DOCKER_DIRECTORY}/shared:/shared
        environment:
            PUID: ${PUID}
            PGID: ${PGID}
            TZ:   ${TZ}
        networks:
            traefik: null
        restart:        ${UNIVERSAL_RESTART_POLICY}
        depends_on:
            - traefik
        labels:
            traefik.enable:                                              true
            traefik.http.routers.tautulli-rtr.rule:                      Host(`${TAUTULLI_SUBDOMAIN}.${DOMAIN_NAME}`)
            traefik.http.routers.tautulli-rtr.entrypoints:               https
            traefik.http.routers.tautulli-rtr.service:                   tautulli-svc
            traefik.http.services.tautulli-svc.loadbalancer.server.port: 8181
            traefik.http.routers.tautulli-rtr.middlewares:               chain-oauth-google@file

    ####################################
    # SONARR (TV SHOW DOWNLOADS)
    ####################################

    sonarr:
        image:          linuxserver/sonarr:latest
        hostname:       ${SONARR_SUBDOMAIN}
        container_name: sonarr
        environment:
            PUID: ${PUID}
            PGID: ${PGID}
            TZ:   ${TZ}
        volumes:
            - ${DOCKER_DIRECTORY}/sonarr/config:/config
            - ${COMPLETED_DOWNLOADS}:/downloads
            - ${TV_DIR}:/tv
            - ${DOCKER_DIRECTORY}/shared:/shared
        networks:
            traefik: null
        depends_on:
            - traefik
        restart:        ${UNIVERSAL_RESTART_POLICY}
        labels:
            traefik.enable:                                            true
            traefik.http.routers.sonarr-rtr.rule:                      Host(`${SONARR_SUBDOMAIN}.${DOMAIN_NAME}`)
            traefik.http.routers.sonarr-rtr.entrypoints:               https
            traefik.http.routers.sonarr-rtr.service:                   sonarr-svc
            traefik.http.services.sonarr-svc.loadbalancer.server.port: 8989
            traefik.http.routers.sonarr-rtr.middlewares:               chain-oauth-google@file

    ####################################
    # RADARR (MOVIE DOWNLOADS)
    ####################################

    radarr:
        image:          linuxserver/radarr:latest
        hostname:       ${RADARR_SUBDOMAIN}
        container_name: radarr
        environment:
            PUID: ${PUID}
            PGID: ${PGID}
            TZ:   ${TZ}
        volumes:
            - ${DOCKER_DIRECTORY}/radarr/config:/config
            - ${COMPLETED_DOWNLOADS}:/downloads
            - ${MOVIE_DIR}:/movies
            - ${DOCKER_DIRECTORY}/shared:/shared
        networks:
            traefik: null
        depends_on:
            - traefik
        restart:        ${UNIVERSAL_RESTART_POLICY}
        labels:
            traefik.enable:                                            true
            traefik.http.routers.radarr-rtr.rule:                      Host(`${RADARR_SUBDOMAIN}.${DOMAIN_NAME}`)
            traefik.http.routers.radarr-rtr.entrypoints:               https
            traefik.http.routers.radarr-rtr.service:                   radarr-svc
            traefik.http.services.radarr-svc.loadbalancer.server.port: 7878
            traefik.http.routers.radarr-rtr.middlewares:               chain-oauth-google@file

    ####################################
    # TRANSMISSION (TORRENTING BEHIND VPN)
    ####################################

    transmission:
        container_name: transmission
        hostname:       ${TRANSMISSION_SUBDOMAIN}
        image:          haugene/transmission-openvpn:latest
        environment:
            PUID:                                    ${PUID}
            PGID:                                    ${PGID}
            OPENVPN_PROVIDER:                        ${OPENVPN_PROVIDER}
            OPENVPN_USERNAME:                        ${OPENVPN_USERNAME}
            OPENVPN_PASSWORD:                        ${OPENVPN_PASSWORD}
            TRANSMISSION_IDLE_SEEDING_LIMIT:         0
            TRANSMISSION_IDLE_SEEDING_LIMIT_ENABLED: "true"
            TRANSMISSION_WEB_UI:                     combustion
            TRANSMISSION_DOWNLOAD_DIR:               /downloads
            LOCAL_NETWORK:                           ${PHYSICAL_SERVER_NETWORK}
            TZ:                                      ${TZ}
        volumes:
            - /etc/localtime:/etc/localtime:ro
            - ${DOCKER_DIRECTORY}/transmission/config:/data/transmission-home
            - ${DOCKER_DIRECTORY}/transmission/watch:/data/watch
            - ${COMPLETED_DOWNLOADS}:/downloads
            - ${INCOMPLETE_DOWNLOADS}:/data/incomplete
            - ${DOCKER_DIRECTORY}/shared:/shared
        dns:
            - 8.8.8.8
            - 8.8.4.4
        cap_add:
            - NET_ADMIN
        devices:
            - /dev/net/tun
        networks:
            traefik: null
        restart:        ${UNIVERSAL_RESTART_POLICY}
        depends_on:
            - traefik
        labels:
            traefik.enable:                                                  true
            traefik.http.routers.transmission-rtr.rule:                      Host(`${TRANSMISSION_SUBDOMAIN}.${DOMAIN_NAME}`)
            traefik.http.routers.transmission-rtr.entrypoints:               https
            traefik.http.routers.transmission-rtr.service:                   transmission-svc
            traefik.http.services.transmission-svc.loadbalancer.server.port: 9091
            traefik.http.routers.transmission-rtr.middlewares:               chain-oauth-google@file

    ####################################
    # JACKETT (TORRENTING INDEX SCRAPER)
    ####################################

    jackett:
        container_name: jackett
        image:          linuxserver/jackett:latest
        hostname:       ${JACKETT_SUBDOMAIN}
        environment:
            PUID: ${PUID}
            PGID: ${PGID}
            TZ:   ${TZ}
        volumes:
            - ${DOCKER_DIRECTORY}/jackett/config:/config
            - ${COMPLETED_DOWNLOADS}:/downloads
            - ${DOCKER_DIRECTORY}/shared:/shared
        networks:
            traefik: null
        restart:        ${UNIVERSAL_RESTART_POLICY}
        depends_on:
            - traefik
        labels:
            traefik.enable:                                             true
            traefik.http.routers.jackett-rtr.rule:                      Host(`${JACKETT_SUBDOMAIN}.${DOMAIN_NAME}`)
            traefik.http.routers.jackett-rtr.entrypoints:               https
            traefik.http.routers.jackett-rtr.service:                   jackett-svc
            traefik.http.services.jackett-svc.loadbalancer.server.port: 9117
            traefik.http.routers.jackett-rtr.middlewares:               chain-oauth-google@file

    ####################################
    # PORTAINER (GUI CONTAINER MANAGEMENT)
    ####################################

    portainer:
        container_name: portainer
        image:          portainer/portainer-ce:latest
        hostname:       ${PORTAINER_SUBDOMAIN}
        environment:
            TZ: ${TZ}
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - ${DOCKER_DIRECTORY}/portainer/config:/data
            - ${DOCKER_DIRECTORY}/shared:/shared
        command:        -H tcp://socket-proxy:2375 --admin-password="${ADMIN_HTPASSWD}"
        networks:
            traefik:             null
            docker_socket_proxy: null
        restart:        ${UNIVERSAL_RESTART_POLICY}
        depends_on:
            - traefik
        labels:
            traefik.enable:                                               true
            traefik.http.routers.portainer-rtr.rule:                      Host(`${PORTAINER_SUBDOMAIN}.${DOMAIN_NAME}`)
            traefik.http.routers.portainer-rtr.entrypoints:               https
            traefik.http.routers.portainer-rtr.service:                   portainer-svc
            traefik.http.services.portainer-svc.loadbalancer.server.port: 9000
            traefik.http.routers.portainer-rtr.middlewares:               chain-oauth-google@file

    ####################################
    # RESUME (FILE STATIC HOSTING)
    ####################################

    resume:
        container_name: resume
        build:
            context:    ${DOCKER_DIRECTORY}/resume/
            dockerfile: Dockerfile
        networks:
            traefik: null
        volumes:
            - ${DOCKER_DIRECTORY}/resume/web/:/var/www/html/
            - ${DOCKER_DIRECTORY}/resume/web/:/usr/share/nginx/html/
        restart:        ${UNIVERSAL_RESTART_POLICY}
        depends_on:
            - traefik
        labels:
            traefik.enable:                                            true
            traefik.http.routers.resume-rtr.rule:                      Host(`${RESUME_SUBDOMAIN}.${DOMAIN_NAME}`)
            traefik.http.routers.resume-rtr.entrypoints:               https
            traefik.http.routers.resume-rtr.service:                   resume-svc
            traefik.http.services.resume-svc.loadbalancer.server.port: 7856
            traefik.http.routers.resume-rtr.middlewares:               chain-no-auth@file